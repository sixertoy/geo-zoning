{"version":3,"sources":["components/MarkerIcon.jsx","components/GeoMap.jsx","components/Loader.jsx","components/Welcome.jsx","App.jsx","index.js"],"names":["MarkerIcon","Leaflet","divIcon","className","html","GeoMap","center","useZoomControl","useState","coords","setCoords","isVisible","setCircleVisibility","Map","maxZoom","minZoom","zoom","zoomControl","TileLayer","attribution","url","Circle","radius","Marker","draggable","icon","position","onMoveEnd","nextCoords","target","getLatLng","onMoveStart","ZoomControl","defaultProps","Loader","viewBox","cx","cy","r","fill","strokeWidth","useStyles","createUseStyles","button","backgroundColor","borderRadius","color","composes","margin","padding","width","container","controls","marginTop","disclaimer","help","fontSize","opacity","message","paf","marginBottom","title","version","right","top","wrapper","textAlign","Welcome","onClickHandler","classes","id","style","type","onClick","PARIS_CENTER","lat","lng","App","mapCenter","setMapCenter","isClicked","setIsClicked","useGeoloc","navigator","geolocation","getCurrentPosition","latitude","longitude","err","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a7e30b0.chunk.js","sourcesContent":["import Leaflet from \"leaflet\";\n\nconst MarkerIcon = Leaflet.divIcon({\n  className: \"leaflet-marker-divicon\",\n  html: `\n<div class=\"leaflet-marker-divicon-container\">\n  <div class=\"leaflet-marker-divicon-inner\">\n    <div class=\"leaflet-marker-divicon-pin\"></div>\n    <div class=\"leaflet-marker-divicon-pulse\"></div>\n  </div>\n</div>\n`\n});\n\nexport default MarkerIcon;\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { Circle, Map, Marker, TileLayer, ZoomControl } from 'react-leaflet';\n\nimport MarkerIcon from './MarkerIcon';\n\nconst RADIUS_METER = 100000;\nconst OSM_LAYER = 'http://a.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png';\n\nconst GeoMap = ({ center, useZoomControl }) => {\n  const [coords, setCoords] = useState(center);\n  const [isVisible, setCircleVisibility] = useState(true);\n  return (\n    <Map center={center} maxZoom={17} minZoom={1} zoom={9} zoomControl={false}>\n      <TileLayer attribution=\"Open Street Map\" url={OSM_LAYER} />\n      {isVisible && <Circle center={coords} radius={RADIUS_METER} />}\n      <Marker\n        draggable\n        icon={MarkerIcon}\n        position={coords}\n        onMoveEnd={({ target }) => {\n          const nextCoords = target.getLatLng();\n          setCoords(nextCoords);\n          setCircleVisibility(true);\n        }}\n        onMoveStart={() => setCircleVisibility(false)}\n      />\n      {useZoomControl && <ZoomControl position=\"topright\" />}\n    </Map>\n  );\n};\n\nGeoMap.defaultProps = {\n  useZoomControl: true,\n};\n\nGeoMap.propTypes = {\n  center: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n  }).isRequired,\n  useZoomControl: PropTypes.bool,\n};\n\nexport default GeoMap;\n","import React from 'react';\n\nconst Loader = () => (\n  <svg className=\"spinner\" viewBox=\"0 0 50 50\">\n    <circle className=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" strokeWidth=\"5\" />\n  </svg>\n);\n\nexport default (Loader);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { createUseStyles } from 'react-jss';\n\nimport { version } from '../../package.json';\n\nconst useStyles = createUseStyles({\n  button: {\n    backgroundColor: '#000',\n    borderRadius: 4,\n    color: '#FFFFFF',\n    composes: ['is-bold'],\n    margin: 12,\n    padding: '12px 24px',\n    width: 120,\n  },\n  container: {\n    color: '#FFFFFF',\n    composes: ['flex-rows', 'flex-center', 'items-center'],\n    padding: 35,\n    position: 'relative',\n  },\n  controls: {\n    composes: ['flex-columns', 'flex-center'],\n    marginTop: 20,\n  },\n  disclaimer: {\n    composes: ['is-bold'],\n    marginTop: 36,\n  },\n  help: {\n    fontSize: '0.85rem',\n    marginTop: 20,\n    opacity: 0.45,\n  },\n  message: {\n    fontSize: '1.2rem',\n    marginTop: 40,\n  },\n  paf: {\n    composes: ['is-italic'],\n    marginBottom: 12,\n  },\n  title: {\n    composes: ['is-bold'],\n  },\n  version: {\n    fontSize: '0.6rem',\n    opacity: 0.45,\n    position: 'absolute',\n    right: 10,\n    top: 10,\n  },\n  wrapper: {\n    textAlign: 'center',\n  },\n});\n\nconst Welcome = ({ onClickHandler }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container} id=\"welcome\">\n      <div className={classes.wrapper}>\n        <h2 className={classes.title}>\n          <span>COVID19</span>\n        </h2>\n        <h1 className={classes.title}>\n          <span>Zone 100KM</span>\n        </h1>\n        <div className={classes.message}>\n          <p>\n            <span>\n              Souhaitez-vous utiliser la géolocalisation de votre téléphone ?\n            </span>\n          </p>\n        </div>\n        <div className={classes.controls}>\n          <div>\n            <button\n              className={classes.button}\n              style={{ backgroundColor: '#73C990' }}\n              type=\"button\"\n              onClick={() => onClickHandler(true)}>\n              <span>Oui</span>\n              <sup>*</sup>\n            </button>\n            <button\n              className={classes.button}\n              style={{ backgroundColor: '#E06C75' }}\n              type=\"button\"\n              onClick={() => onClickHandler(false)}>\n              <span>Non</span>\n            </button>\n          </div>\n        </div>\n        <div className={classes.help}>\n          <p className={classes.paf}>\n            <sup>*</sup>&nbsp;\n            <span>\n              La géolocation doit être activée dans les préférences de votre\n              device\n            </span>\n          </p>\n          <p className={classes.paf}>\n            Utiliser la molette de votre souris pour zoomer/dézoomer sur la\n            carte\n          </p>\n          <p className={classes.disclaimer}>\n            Cette application ne stocke aucunes de vos informations personelles\n          </p>\n        </div>\n      </div>\n      <div className={classes.version}>\n        <small>v{version}</small>\n      </div>\n    </div>\n  );\n};\n\nWelcome.propTypes = {\n  onClickHandler: PropTypes.func.isRequired,\n};\n\nexport default Welcome;\n","import React, { useState } from 'react';\n\nimport GeoMap from './components/GeoMap';\nimport Loader from './components/Loader';\nimport Welcome from './components/Welcome';\n\nconst PARIS_CENTER = {\n  lat: 48.8534,\n  lng: 2.3488,\n};\n\nconst getLatLng = position => {\n  if (\n    !position ||\n    !position.coords ||\n    !position.coords.latitude ||\n    !position.coords.longitude\n  ) {\n    return PARIS_CENTER;\n  }\n  const { latitude, longitude } = position.coords;\n  const next = { lat: latitude, lng: longitude };\n  return next;\n};\n\nconst App = () => {\n  const [mapCenter, setMapCenter] = useState(null);\n  const [isClicked, setIsClicked] = useState(false);\n  return (\n    <div id=\"app-container\">\n      {isClicked && !mapCenter && <Loader />}\n      {isClicked && mapCenter && <GeoMap center={mapCenter} />}\n      {!isClicked && !mapCenter && (\n        <Welcome\n          onClickHandler={useGeoloc => {\n            setIsClicked(true);\n            try {\n              if (!useGeoloc || !navigator.geolocation) {\n                setMapCenter(PARIS_CENTER);\n              } else {\n                navigator.geolocation.getCurrentPosition(\n                  position => setMapCenter(getLatLng(position)),\n                  () => setMapCenter(PARIS_CENTER)\n                );\n              }\n            } catch (err) {\n              setMapCenter(PARIS_CENTER);\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import './css/index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { version } from '../package.json';\nimport App from './App';\n\n// eslint-disable-next-line\nconsole.log('Version : v', version);\n\nReactDOM.render(\n  // eslint-disable-next-line\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}